// Code generated by MockGen. DO NOT EDIT.
// Source: azappconfig/provider/internal/loader (interfaces: ConfigurationSettingsRetriever)

// Package mocks is a generated GoMock package.
package mocks

import (
	v1 "azappconfig/provider/api/v1"
	loader "azappconfig/provider/internal/loader"
	context "context"
	reflect "reflect"

	azcore "github.com/Azure/azure-sdk-for-go/sdk/azcore"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigurationSettingsRetriever is a mock of ConfigurationSettingsRetriever interface.
type MockConfigurationSettingsRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationSettingsRetrieverMockRecorder
}

// MockConfigurationSettingsRetrieverMockRecorder is the mock recorder for MockConfigurationSettingsRetriever.
type MockConfigurationSettingsRetrieverMockRecorder struct {
	mock *MockConfigurationSettingsRetriever
}

// NewMockConfigurationSettingsRetriever creates a new mock instance.
func NewMockConfigurationSettingsRetriever(ctrl *gomock.Controller) *MockConfigurationSettingsRetriever {
	mock := &MockConfigurationSettingsRetriever{ctrl: ctrl}
	mock.recorder = &MockConfigurationSettingsRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationSettingsRetriever) EXPECT() *MockConfigurationSettingsRetrieverMockRecorder {
	return m.recorder
}

// CheckAndRefreshSentinels mocks base method.
func (m *MockConfigurationSettingsRetriever) CheckAndRefreshSentinels(arg0 context.Context, arg1 *v1.AzureAppConfigurationProvider, arg2 map[v1.Sentinel]*azcore.ETag) (bool, map[v1.Sentinel]*azcore.ETag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndRefreshSentinels", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(map[v1.Sentinel]*azcore.ETag)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckAndRefreshSentinels indicates an expected call of CheckAndRefreshSentinels.
func (mr *MockConfigurationSettingsRetrieverMockRecorder) CheckAndRefreshSentinels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndRefreshSentinels", reflect.TypeOf((*MockConfigurationSettingsRetriever)(nil).CheckAndRefreshSentinels), arg0, arg1, arg2)
}

// CreateKeyValueSettings mocks base method.
func (m *MockConfigurationSettingsRetriever) CreateKeyValueSettings(arg0 context.Context, arg1 loader.ResolveSecretReference) (*loader.TargetKeyValueSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyValueSettings", arg0, arg1)
	ret0, _ := ret[0].(*loader.TargetKeyValueSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyValueSettings indicates an expected call of CreateKeyValueSettings.
func (mr *MockConfigurationSettingsRetrieverMockRecorder) CreateKeyValueSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyValueSettings", reflect.TypeOf((*MockConfigurationSettingsRetriever)(nil).CreateKeyValueSettings), arg0, arg1)
}

// ResolveKeyVaultReferences mocks base method.
func (m *MockConfigurationSettingsRetriever) ResolveKeyVaultReferences(arg0 context.Context, arg1 map[string]loader.KeyVaultSecretUriSegment, arg2 loader.ResolveSecretReference) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveKeyVaultReferences", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveKeyVaultReferences indicates an expected call of ResolveKeyVaultReferences.
func (mr *MockConfigurationSettingsRetrieverMockRecorder) ResolveKeyVaultReferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveKeyVaultReferences", reflect.TypeOf((*MockConfigurationSettingsRetriever)(nil).ResolveKeyVaultReferences), arg0, arg1, arg2)
}
