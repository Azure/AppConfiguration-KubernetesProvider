// Code generated by MockGen. DO NOT EDIT.
// Source: azappconfig/provider/internal/loader (interfaces: ClientManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	loader "azappconfig/provider/internal/loader"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientManager is a mock of ClientManager interface.
type MockClientManager struct {
	ctrl     *gomock.Controller
	recorder *MockClientManagerMockRecorder
}

// MockClientManagerMockRecorder is the mock recorder for MockClientManager.
type MockClientManagerMockRecorder struct {
	mock *MockClientManager
}

// NewMockClientManager creates a new mock instance.
func NewMockClientManager(ctrl *gomock.Controller) *MockClientManager {
	mock := &MockClientManager{ctrl: ctrl}
	mock.recorder = &MockClientManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientManager) EXPECT() *MockClientManagerMockRecorder {
	return m.recorder
}

// GetClients mocks base method.
func (m *MockClientManager) GetClients() []*loader.ConfigurationClientWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients")
	ret0, _ := ret[0].([]*loader.ConfigurationClientWrapper)
	return ret0
}

// GetClients indicates an expected call of GetClients.
func (mr *MockClientManagerMockRecorder) GetClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockClientManager)(nil).GetClients))
}

// RefreshClients mocks base method.
func (m *MockClientManager) RefreshClients() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshClients")
}

// RefreshClients indicates an expected call of RefreshClients.
func (mr *MockClientManagerMockRecorder) RefreshClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshClients", reflect.TypeOf((*MockClientManager)(nil).RefreshClients))
}

// UpdateClientBackoffStatus mocks base method.
func (m *MockClientManager) UpdateClientBackoffStatus(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateClientBackoffStatus", arg0, arg1)
}

// UpdateClientBackoffStatus indicates an expected call of UpdateClientBackoffStatus.
func (mr *MockClientManagerMockRecorder) UpdateClientBackoffStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientBackoffStatus", reflect.TypeOf((*MockClientManager)(nil).UpdateClientBackoffStatus), arg0, arg1)
}
